"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

# type Query @guard(with: ["api"]) {
type Query @guard{
    users: [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
    user(id: ID @eq): User @find(model: "App\\Models\\User")
    me: User! @auth

    modeles(page: Int = 1, orderBy: [OrderByClause!] @orderBy): [Modele!]! @paginate(defaultCount: 20,  model: "App\\Models\\Modele")
    modele(hash: String @eq): Modele @find(model: "App\\Models\\Modele")

    fetchMyModels: [Modele!] @field(resolver: "MyModels")
    fetchMyFollowers: [User!] @field(resolver: "myFollowers")

    categories: [Category!]! @all(model: "App\\Models\\Category") 
    category(id: ID @eq): Category @find(model: "App\\Models\\Category")

    # photos: [Photo!]! @paginate(type: "paginator" model: "App\\Models\\Photo")
    photo(id: ID @eq): Photo @find(model: "App\\Models\\Photo")

    photos(page: Int = 1, orderBy: [OrderByClause!] @orderBy): [Photo!]! @paginate(defaultCount: 20,  model: "App\\Models\\Photo")

    # favoritePhoto(user_id: Int @eq, page: Int = 1, first: Int = 10, orderBy: [OrderByClause!] @orderBy): [Photo!]!
    favoritePhoto( page: Int = 1, first: Int = 10, orderBy: [OrderByClause!] @orderBy): [Photo!]! @paginate(defaultCount: 20,  model: "App\\Models\\Photo")
 
    getPublishableKey: PublishableKey! @field(resolver: "GetPublishableKey")

    myCards: [GetCardResponse!]! @field(resolver: "MyCards")
    myInvoices: [InvoceResponse!]! @field(resolver: "MyInvoices")


    getModelPrice(hash: String): GetModelPriceStripeIdResponse! @field(resolver: "GetModelPriceStripeId")

    createPaymentIntent: PaymentIntentResponse! @field(resolver: "CreatePaymentIntent")
    deleteInvoice(invoiceId: String): AddPriceResponse! @field(resolver: "DeleteInvoice")

    myTransaction(modele_id: ID! @where(modele_id: modele_id)): [ModeleTransaction!]! @paginate(defaultCount: 20,  model: "App\\Models\\ModeleTransaction")
}




type Mutation {
    ##auth
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Login")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Register")
    verifyUserEmail(input: VerifyUserEmailInput!  @spread): VerifyUserEmailResponse @field(resolver: "VerifyUserEmail")

    ##user
    updateUser(input: UpdateUserInput! @spread): User @update
    changePassword(input: ChangePasswordInput! @spread): [ChangePasswordResponse!]! @field(resolver: "ChangePassword")

    ##category
    createCategory(input: CategoryInput! @spread): Category @create
    updateCategory(id: ID!, input: CategoryInput @spread): Category @update
    deleteCategory(id: ID!): Category @delete

    ##photo
    addPhoto(input: PhotoInput! @spread): Photo @create
    updatePhoto(id: ID!, input: PhotoInput @spread): Photo @update
    deletePhoto(id: ID!): Photo @delete

    ##favorite
    addFavorite(input: FavoriteInput! @spread): Favorite @create
    updateFavorite(id: ID!, input: FavoriteInput @spread): Favorite @update
    deleteFavorite(id: ID!): Favorite @delete

    ##follower
    addFollower(input: FollowerInput! @spread): Follower @create
    updateFollower(id: ID!, input: FollowerInput @spread): Follower @update
    deleteFollower(id: ID!): Follower @delete

    toggleLike(input: ToggleLikeInput!  @spread): ToggleLikeResponse @field(resolver: "ToggleLike")

    toggleFollow(input: ToggleFollowInput!  @spread): ToggleFollowResponse @field(resolver: "ToggleFollow")

    modelPlan(input: ModelPlanInput!  @spread): ModelPlanResponse @field(resolver: "ModelPlan")
    addPrice(input: AddPriceInput!  @spread): AddPriceResponse @field(resolver: "AddPrice")

    addCard(input: CardInput!  @spread): CardResponse @field(resolver: "AddCard")
    deleteCard(input: CardInput!  @spread): CardResponse @field(resolver: "DeleteCard")
    setDefaultCard(input: CardInput!  @spread): CardResponse @field(resolver: "SetDefaultCard")
}


type User {
    id: ID!
    name: String!
    email: String!
    active: Boolean!
    admin: Boolean!
    first_login: Boolean!
    user_type: String!
    is_model: Boolean
    is_consumer: Boolean
    avatar: String
    telephone: String!
    gender: String!
    modele: Modele @hasOne
    modeles: [Modele!]! @belongsToMany
    favorites: [Photo!]! @belongsToMany
    pm_last_four: String
    is_new: Boolean

    created_at: DateTime!
    updated_at: DateTime!
}

type Modele {
    id: ID!
    stage_name: String!
    bucket: String
    poster: String
    hash: String
    price: String
    bio: String
    facebook: String
    instagram: String
    twitter: String
    youtube: String
    verified: Boolean
    followed_by_me: Boolean
    new_follower_count: Int
    user: User @belongsTo
    followers: [User!]! @belongsToMany
    photos_count: Int
    followers_count: Int
    photos: [Photo!]! @hasMany
    modele_account_data: ModeleAccount

    created_at: DateTime!
    updated_at: DateTime!
}

type ModeleAccount {
    id: ID!
    modele_id: ID!
    account: Int!
    balance: Int!

    created_at: DateTime!
    updated_at: DateTime!
}

type ModeleTransaction {
    id: ID!
    amount: Int!
    type: String!

    created_at: DateTime!
    updated_at: DateTime!
}

type Category {
    id: ID!
    name: String!
    slug: String!
    photos: [Photo!]! @hasMany

    created_at: DateTime!
    updated_at: DateTime!
}

type Photo {
    id: ID!
    modele_id: Int!
    category_id: Int!
    uri: String!
    bucket: String!
    caption: String!
    detail: String
    featured: Boolean
    for_my_modele: Boolean
    hash: String
    type: String
    publish: Boolean
    liked_by_me: Boolean
    is_for_me: Boolean
    likes_count: Int
    category: Category! @belongsTo
    modele: Modele! @belongsTo
    users: [User!]! @belongsToMany


    created_at: DateTime!
    updated_at: DateTime!
}


type Favorite {
    id: ID!
    user_id: Int!
    photo_id: Int!
    photo: Photo @belongsTo
    user: User @belongsTo

    created_at: DateTime!
    updated_at: DateTime!
}

type PublishableKey {
    key: String
}

type PaymentIntentResponse {
    client_secret: String,
}

type ToggleLikeResponse {
    success: Boolean
}

type ToggleFollowResponse {
    success: Boolean
}

type ModelPlanResponse {
    success: Boolean
}

type AddPriceResponse {
    success: Boolean
}

type CardResponse {
    success: Boolean
    id: String
    last4: String
}

type GetCardResponse {
    id: String
    brand: String
    last4: String
    exp_month: String
    exp_year: String
}

type InvoceResponse {
    id: String
    amount_paid: String
    created: String
    hosted_invoice_url: String
    lines: String
}


type VerifyUserEmailResponse {
    exist: Boolean
}

type Follower {
    id: ID!
    modele_id: Int!
    user_id: Int!

    created_at: DateTime!
    updated_at: DateTime!
}

type ChangePasswordResponse {
    success: Boolean
    message: String
}




##input
input CategoryInput {
    name: String!
}

input ChangePasswordInput {
    password: String!
    new_password: String!
}

input ToggleLikeInput {
    photo_id: String!
}

input CardInput {
    card: String!
}

input ToggleFollowInput {
    modele_id: String!
    payment_method: String
}

input VerifyUserEmailInput {
    email: String!
}

input CancelSubscriptionInput {
    paymentMethod: String!
}

input PhotoInput {
    modele_id: Int!
    category_id: Int!
    uri: String!
    bucket: String!
    type: String!
    caption: String!
    detail: String!
    featured: Boolean
    publish: Boolean
}

input FavoriteInput {
    photo_id: Int!
    user_id: Int!
}

input FollowerInput {
    modele_id: Int!
    user_id: Int!
}

input UpdateUserInput {
    id: ID!
    name: String 
    email: String
    gender: Genre 
    first_login: Boolean
    user_type: UserType 
    telephone: String
    avatar: String
    modele: ModeleHasOne
}

input ModeleHasOne {
    create: CreateModeleInput
    update: UpdateModeleInput
    upsert: UpsertModeleInput
    delete: ID
}

input CreateModeleInput {
    stage_name: String! 
    bucket: String 
    poster: String 
    bio: String 
    facebook: String 
    instagram: String 
    twitter: String 
    youtube: String 
}

input UpdateModeleInput {
    id: ID
    stage_name: String
    bucket: String 
    poster: String 
    bio: String 
    facebook: String 
    instagram: String 
    twitter: String 
    youtube: String 
}

input UpsertModeleInput {
    id: ID
    stage_name: String! 
    bucket: String 
    poster: String 
    hash: String 
    bio: String 
    facebook: String 
    instagram: String 
    twitter: String 
    youtube: String 
}

input ModelPlanInput {
    user_id: Int!
    name: String!
    cost: Int!
}

input AddPriceInput {
    user_id: String!
    cost: Int!
}


input OrderByClause {
	field: String!
	order: SortOrder!
}



enum SortOrder {
	ASC
	DESC
}

input LoginInput {
    username: String!
    password: String!
}

input RefreshTokenInput {
    refresh_token: String
}

input PaymentIntentInput {
    hash: String!
}

type GetModelPriceStripeIdResponse {
    price_id: String
    cost: String
}

type AuthPayload {
    access_token: String
    refresh_token: String
    expires_in: Int
    token_type: String
    user: User
}

type RefreshTokenPayload {
    access_token: String!
    refresh_token: String!
    expires_in: Int!
    token_type: String!
}

type LogoutResponse {
    status: String!
    message: String
}

type ForgotPasswordResponse {
    status: String!
    message: String
}

type RegisterResponse {
    tokens: AuthPayload
    status: RegisterStatuses!
}

type UpdatePasswordResponse {
    status: String!
    message: String
}

enum RegisterStatuses {
    MUST_VERIFY_EMAIL
    SUCCESS
}

enum UserType {
	MODEL
	CONSUMER
}

enum Genre {
	MALE
	FEMALE
    OTHER
}

input ForgotPasswordInput {
    email: String! @rules(apply: ["required", "email"])
}

input NewPasswordWithCodeInput {
    email: String! @rules(apply: ["required", "email"])
    token: String! @rules(apply: ["required", "string"])
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}

input RegisterInput {
    name: String! @rules(apply: ["required", "string"])
    email: String! @rules(apply: ["required", "email", "unique:users,email"])
    password: String! @rules(apply: ["required", "min:8"])
    gender: Genre @rules(apply: ["required"])
    user_type: UserType @rules(apply: ["required"])
    telephone: String! @rules(apply: ["required", "string"])
    modele: ModeleHasOne
}

input CreateModeleInput {
    stage_name: String! 
    bucket: String 
    poster: String 
    has: Int 
    bio: String 
    facebook: String 
    instagram: String 
    twitter: String 
    youtube: String 
}

input SocialLoginInput {
    provider: String! @rules(apply: ["required"])
    token: String! @rules(apply: ["required"])
}

input VerifyEmailInput {
    token: String!
}

input UpdatePassword {
    old_password: String!
    password: String! @rules(apply: ["required", "confirmed", "min:8"])
    password_confirmation: String!
}