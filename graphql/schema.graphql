"A datetime string with format `Y-m-d H:i:s`, e.g. `2018-01-01 13:00:00`."
scalar DateTime @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\DateTime")
"A date string with format `Y-m-d`, e.g. `2011-05-23`."
scalar Date @scalar(class: "Nuwave\\Lighthouse\\Schema\\Types\\Scalars\\Date")

type Query {
    users: [User!]! @paginate(type: "paginator" model: "App\\Models\\User")
    user(id: ID @eq): User @find(model: "App\\Models\\User")

    modeles: [Modele!]! @paginate(type: "paginator" model: "App\\Models\\Modele")
    modele(id: ID @eq): Modele @find(model: "App\\Models\\Modele")

    categories: [Category!]! @paginate(type: "paginator" model: "App\\Models\\Category")
    category(id: ID @eq): Category @find(model: "App\\Models\\Category")

    photos: [Photo!]! @paginate(type: "paginator" model: "App\\Models\\Photo")
    photo(id: ID @eq): Photo @find(model: "App\\Models\\Photo")
}

type Mutation {
    ##auth
    login(input: LoginInput @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Login@resolve")
    refreshToken(input: RefreshTokenInput @spread): RefreshTokenPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\RefreshToken@resolve")
    logout: LogoutResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Logout@resolve")
    forgotPassword(input: ForgotPasswordInput! @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ForgotPassword@resolve")
    updateForgottenPassword(input: NewPasswordWithCodeInput @spread): ForgotPasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\ResetPassword@resolve")
    register(input: RegisterInput @spread): RegisterResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\Register@resolve")
    socialLogin(input: SocialLoginInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\SocialLogin@resolve")
    verifyEmail(input: VerifyEmailInput! @spread): AuthPayload! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\VerifyEmail@resolve")
    updatePassword(input: UpdatePassword! @spread): UpdatePasswordResponse! @field(resolver: "Joselfonseca\\LighthouseGraphQLPassport\\GraphQL\\Mutations\\UpdatePassword@resolve") @guard(with: ["api"])

    ##category
    createCategory(input: CategoryInput! @spread): Category @create
    updateCategory(id: ID!, input: CategoryInput @spread): Category @update
    deleteCategory(id: ID!): Category @delete

    ##photo
    addPhoto(input: PhotoInput! @spread): Photo @create
    updatePhoto(id: ID!, input: PhotoInput @spread): Photo @update
    deletePhoto(id: ID!): Photo @delete

    ##favorite
    addFavorite(input: FavoriteInput! @spread): Favorite @create
    updateFavorite(id: ID!, input: FavoriteInput @spread): Favorite @update
    deleteFavorite(id: ID!): Favorite @delete
}


type User {
    id: ID!
    name: String!
    email: String!
    modele: Modele @hasOne
    modeles: [Modele!]! @belongsToMany
    favorites: [Photo!]! @belongsToMany

    created_at: DateTime!
    updated_at: DateTime!
}

type Modele {
    id: ID!
    stage_name: String!
    image_bucket: String
    poster: String
    has: Int
    bio: String
    facebook: String
    instagram: String
    twitter: String
    youtube: String
    verified: Boolean
    user: User @belongsTo
    followers: [User!]! @belongsToMany
    photos: [Photo!]! @hasMany

    created_at: DateTime!
    updated_at: DateTime!
}

type Category {
    id: ID!
    name: String!
    slug: String!
    photos: [Photo!]! @hasMany

    created_at: DateTime!
    updated_at: DateTime!
}

type Photo {
    id: ID!
    modele_id: Int!
    category_id: Int!
    uri: String!
    image_bucket: String!
    caption: String!
    detail: String
    featured: Boolean
    has: Int
    publish: Boolean
    category: Category! @belongsTo
    modele: Modele! @belongsTo
    users: [User!]! @belongsToMany

    created_at: DateTime!
    updated_at: DateTime!
}

type Favorite {
    id: ID!
    user_id: Int!
    photo_id: Int!

    created_at: DateTime!
    updated_at: DateTime!
}




##input
input CategoryInput {
    name: String!
    slug: String
}

input PhotoInput {
    modele_id: Int!
    category_id: Int!
    uri: String!
    image_bucket: String!
    caption: String!
    detail: String!
    featured: Boolean
    has: Int!
    publish: Boolean
}

input FavoriteInput {
    photo_id: Int!
    user_id: Int!
}